#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'json'

CREDENTIALS_PATH = File.join(File.dirname(__FILE__),
                             'elastic-mapreduce-ruby/credentials.json')

class RunEmr
  def initialize(options)
    @options = options
  end

  def run
    write_credentials
    jobflow = nil

    if @options.create
      create_cluster
    end

    watch_thread = nil
    if @options.watch
      watch_thread = Thread.new { watch_job }
    end

    if @options.shell || @options.interactive
      get_shell
    end

    if @options.tracker
      forward_tracker
    end

    if @options.terminate
      terminate_job
    end

    if @options.list
      list_jobs
    end

    if watch_thread
      watch_thread.join
    end
  end

  def ruby
    ruby = '/usr/bin/env ruby'

    if RUBY_VERSION =~ /^1.9/
      # fall back to /usr/bin/ruby which is probably 1.8.
      ruby = '/usr/bin/ruby'
    end

    ruby
  end

  def emr
    "#{ruby} lib/elastic-mapreduce-ruby/elastic-mapreduce"
  end

  def create_cluster
    cmd = [
      emr,
      '--create',
      '--name', "\"#{ENV['USER']}'s pig jobflow\"",

      '--bootstrap-action',
        's3://elasticmapreduce/bootstrap-actions/configure-daemons',
        '--args', '--namenode-opts=-XX:GCTimeRatio=19',

      '--bootstrap-action',
        's3://elasticmapreduce/bootstrap-actions/configure-hadoop',
        '--args', '-m,mapreduce.task.timeout=0',
        '--args', '-m,mapred.task.timeout=0',
        '--args', '-m,tasktracker.http.threads=40',
        '--args', '-m,mapred.map.tasks.speculative.execution=false',
        '--args', '-s,mapred.map.tasks.speculative.execution=false',

      '--bootstrap-action', 's3://packetpig/bootstrap.sh',
    ]

    cmd += [
      '--instance-group', 'master',
      '--instance-count', '1',
      '--instance-type', @options.instance_type,
    ]

    if @options.bid_price != 0
      cmd += ['--bid-price', @options.bid_price]
    end

    cmd += [
      '--instance-group', 'core',
      '--instance-count', @options.instance_count,
      '--instance-type', @options.instance_type,
    ]

    if @options.bid_price != 0
      cmd += ['--bid-price', @options.bid_price]
    end

    if @options.interactive
      cmd << '--alive'
      cmd << '--pig-interactive'
    else
      cmd << '--alive'
      cmd += ['--pig-script', @options.file]
      cmd += ['--step-name', File.basename(@options.file)]

      if @options.keepalive
        cmd += ['--step-action', 'CANCEL_AND_WAIT']
      end

      args = [
        '-p,includepath=s3://packetpig/pig/include-emr.pig',
        "-p,snortconfig=/mnt/var/lib/snort-#{@options.snort_version}/etc/snort.conf",
        '-p,dnspath=/mnt/var/lib/packetpig/lib/scripts/dns_parser.py',
        '-p,tcppath=/mnt/var/lib/packetpig/lib/scripts/tcp.py',
      ]

      if @options.path
        args << "-p,pcap=#{@options.path}"
      end

      if @options.output
        args << "-p,output=#{File.join(@options.output, "output-#{Time.now.to_i}")}"
      end

      if args.any?
        cmd += ['--args', args.join(',')]
      end

      cmd += [
        '--ami-version', '2.2',
        '--hadoop-version', '1.0.3',
        '--pig-version', '0.9.2.2',
      ]
    end

    puts cmd.join(' ')
    r = `#{cmd.join(' ')}`
    puts r
    @options.jobflow = r.match(/(j-.*)/)[1]
  end

  def get_shell(options={})
    cmd = [
      emr,
      '--jobflow', @options.jobflow,
      '--ssh',
    ]

    if @options.interactive
      pig = [
        'pig',
        '-p includepath=s3://packetpig/pig/include-emr.pig',
        '-p snortconfig=/mnt/var/lib/snort/etc/snort.conf',
        '-p dnspath=/mnt/var/lib/packetpig/lib/scripts/dns_parser.py',
        '-p tcppath=/mnt/var/lib/packetpig/lib/scripts/tcp.py',
      ].join(' ')

      cmd += ["\"#{pig}\""]
    end

    if options[:cmd]
      cmd += ["\"#{options[:cmd]}\""]
    end


    r = false
    while !r do
      r = system(cmd.join(' '))
      sleep 1
    end
  end

  def get_host
    cmd = [
      emr,
      '--jobflow', @options.jobflow,
      '--describe',
    ]

    data = JSON.parse(`#{cmd.join(' ')}`)
    data['JobFlows'][0]['Instances']['MasterPublicDnsName']
  end

  def ssh
    [
      'ssh',
      '-o', 'ServerAliveInterval=10',
      '-o', 'StrictHostKeyChecking=no',
      '-o', 'KbdInteractiveDevices=none',
      '-i', ENV['EMR_KEYPAIR_PATH'],
    ]
  end

  def forward_tracker
    # wait for boot, just reuse the get_shell with a cool command to let us know it's ready
    local_port = (1024 + rand * (2**16 - 1024)).to_i
    get_shell(:cmd => "echo 'Connect to http://localhost:#{local_port}/jobtracker.jsp - hit ctrl-c to stop the ssh forwarder'")
    host = get_host

    cmd = ssh + [
      '-L', "#{local_port}:localhost:9100",
      "hadoop@#{host}",
      '-N',
    ]

    `#{cmd.join(' ')}`
  end

  def watch_job
    host = get_host
    while !host
      sleep 30
      host = get_host
    end

    cmd = ssh + [
      "hadoop@#{host}",
      '"/mnt/var/lib/packetpig/lib/tailer /mnt/var/log/bootstrap-actions/*/std* /mnt/var/log/hadoop/steps/*/std*" 2>/dev/null',
    ]

    r = false
    while !r do
      r = system(cmd.join(' '))
      sleep 1
    end
  end

  def terminate_job
    cmd = [
      emr,
      '--jobflow', @options.jobflow,
      '--terminate',
    ]

    puts `#{cmd.join(' ')}`
  end

  def list_jobs
    cmd = [
      emr,
      '--describe',
    ]

    JSON.parse(`#{cmd.join(' ')}`)['JobFlows'].each do |jobflow|
      state = jobflow['ExecutionStatusDetail']['State']
      name = jobflow['Name']
      unless ['TERMINATED', 'FAILED', 'COMPLETED'].include?(state)
        puts "#{jobflow['JobFlowId']}\t#{state}\t#{name}"
        jobflow['Steps'].each do |step|
          t0 = Time.at(step['ExecutionStatusDetail']['StartDateTime']).to_i rescue Time.now.to_i
          t1 = Time.at(step['ExecutionStatusDetail']['EndDateTime']).to_i rescue Time.now.to_i
          state = step['ExecutionStatusDetail']['State']
          name = step['StepConfig']['Name'][0..39]
          printf "\t%-40s %-20s%10ds\n", name, state, t1 - t0
        end
      end
    end
  end

  def write_credentials
    fn = CREDENTIALS_PATH

    ENV['EC2_REGION'] ||= 'us-east-1'

    opts = Hash[
      [ :AWS_ACCESS_KEY_ID,
        :AWS_SECRET_ACCESS_KEY,
        :EC2_REGION,
        :EMR_KEYPAIR,
        :EMR_KEYPAIR_PATH,
      ].map do |k|
        if v = ENV[k.to_s]
          [k, v]
        else
          STDERR.write "env var #{k} not defined.\n"
          exit 1
        end
      end
    ]

    tpl = <<-EOT
    {
      "access_id": "#{opts[:AWS_ACCESS_KEY_ID]}",
      "private_key": "#{opts[:AWS_SECRET_ACCESS_KEY]}",
      "keypair": "#{opts[:EMR_KEYPAIR]}",
      "key-pair-file": "#{opts[:EMR_KEYPAIR_PATH]}",
      "log_uri": "#{@options.log_uri}",
      "region": "#{opts[:EC2_REGION]}"
    }
    EOT

    File.open(fn, 'w') do |f|
      f << tpl
    end

    `chmod 0600 #{ENV['EMR_KEYPAIR_PATH']}`
  end
end

if __FILE__ == $0
  options = OpenStruct.new
  options.create = true

  optparse = OptionParser.new do |opts|
    #opts.banner = "Usage: #{__FILE__} -f PIG_SCRIPT -r S3_LOCATION [-c INSTANCE_COUNT] [-t INSTANCE_TYPE] [-b BID_PRICE] [-i]"

    options.file = nil
    opts.on('-f FILE', '--file', 'pig script') do |file|
      options.file =  file
    end

    options.path = nil
    opts.on('-r PATH', '--read', 's3 path or directory') do |path|
      options.path = path
    end

    options.log_uri = nil
    opts.on('-l PATH', '--log-uri', 's3 path or directory') do |path|
      options.log_uri = path
    end

    options.output = nil
    opts.on('-o PATH', '--output', 's3 path or directory') do |path|
      options.output = path
    end

    options.instance_count = 1
    opts.on('-c INSTANCE_COUNT', Integer, '--instance-count', 'number of ec2 instances (default: 1)') do |c|
      options.instance_count = c
    end

    options.instance_type = 'm1.large'
    opts.on('-t INSTANCE_TYPE', '--instance-type', 'type of ec2 instances (default: m1.large)') do |t|
      options.instance_type = t
    end

    options.bid_price = 0
    opts.on('-b BID_PRICE', Float, '--bid-price', 'bid price (optional, defaults to on-demand instances') do |b|
      options.bid_price = b
    end

    options.interactive = false
    opts.on('-i', '--interactive', 'interactive pig shell') do
      options.interactive = true
    end

    options.shell = false
    opts.on('-s JOBFLOW_ID', '--shell', 'run shell only') do |job|
      options.shell = true
      options.jobflow = job
      options.create = false
    end

    options.tracker = false
    opts.on('-x JOBFLOW_ID', '--forward', 'forward the jobtracker port locally. access on http://localhost:8888/') do |job|
      options.tracker = true
      options.jobflow = job
      options.create = false
    end

    options.terminate = false
    opts.on('-d JOBFLOW_ID', '--terminate', 'terminate the job') do |job|
      options.terminate = true
      options.jobflow = job
      options.create = false
    end

    options.keepalive = false
    opts.on('-k', '--keepalive', 'do not terminate on failure') do
      options.keepalive = true
    end


    options.watch = false
    opts.on('-w [JOBFLOW_ID]', '--watch', 'watch the job') do |job|
      options.watch = true
      if job
        options.create = false
        options.jobflow = job
      end
    end

    options.list = false
    opts.on('-e', '--list', 'list non-terminated jobflows') do
      options.list = true
      options.create = false
    end

    options.snort_version = '2931'
    opts.on('-y SNORT_VERSION', '--snort_version', 'version of snort to use') do |version|
      options.snort_version = version
    end

    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      puts
      puts "Environment variables:"
      puts <<-EOE
    AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY
    EMR_KEYPAIR
    EMR_KEYPAIR_PATH
    EC2_REGION (optional, defaults to us-east-1)
      EOE
      exit
    end
  end

  optparse.parse!

  if !options.interactive && options.create
    unless options.file
      puts "-f must be specified"
      puts optparse
      exit 1
    end

    unless options.path
      puts "-r must be specified"
      puts optparse
      exit 1
    end

    unless options.output
      puts "-o must be specified"
      puts optparse
      exit 1
    end

    unless options.log_uri
      puts "-l must be specified"
      puts optparse
      exit 1
    end
  end

  RunEmr.new(options).run
end

